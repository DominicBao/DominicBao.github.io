<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://dominicbao.github.io</id>
    <title>阿方的博客</title>
    <updated>2021-08-22T15:30:25.489Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://dominicbao.github.io"/>
    <link rel="self" href="https://dominicbao.github.io/atom.xml"/>
    <subtitle>快乐学习，美好生活</subtitle>
    <logo>https://dominicbao.github.io/images/avatar.png</logo>
    <icon>https://dominicbao.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 阿方的博客</rights>
    <entry>
        <title type="html"><![CDATA[README基本语法]]></title>
        <id>https://dominicbao.github.io/post/readme-ji-ben-yu-fa/</id>
        <link href="https://dominicbao.github.io/post/readme-ji-ben-yu-fa/">
        </link>
        <updated>2021-08-22T14:49:49.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>此文章仅给博客编写者使用</p>
</blockquote>
<h3 id="标题">标题</h3>
<h1 id="标题1">标题1</h1>
<h2 id="标题2">标题2</h2>
<h3 id="标题3">标题3</h3>
<h4 id="标题4">标题4</h4>
<h5 id="标题5">标题5</h5>
<h3 id="样式文本">样式文本</h3>
<p><strong>这是粗体文本</strong><br>
<em>这是斜体文本</em><br>
<s>删除线</s><br>
<em><strong>全部粗体和斜体</strong></em></p>
<h3 id="引用文本">引用文本</h3>
<blockquote>
<p>引用文本</p>
</blockquote>
<h3 id="引用代码">引用代码</h3>
<pre><code>git status
git add
git commit
</code></pre>
<h3 id="链接">链接</h3>
<p><a href="https://pages.github.com/">github链接</a></p>
<h3 id="列表">列表</h3>
<ul>
<li>George Washington</li>
<li>John Adams</li>
<li>Thomas Jefferson</li>
</ul>
<ol>
<li>James Madison</li>
<li>James Monroe</li>
<li>John Quincy Adams</li>
</ol>
<h3 id="嵌套列表">嵌套列表</h3>
<ol>
<li>第一个列表项
<ul>
<li>第一个嵌套列表项
<ul>
<li>第二个嵌套列表项</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="任务列表">任务列表</h3>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-323651"><label class="task-list-item-label" for="task-item-323651"> 完成更改</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-323345"><label class="task-list-item-label" for="task-item-323345"> 推送提交到 GitHub</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8735058"><label class="task-list-item-label" for="task-item-8735058"> 打开拉取请求</label></li>
</ul>
<h3 id="忽略-markdown-格式">忽略 Markdown 格式</h3>
<p>让我们将 *our-new-project* 重命名为 *our-old-project*。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[常见浏览器内核]]></title>
        <id>https://dominicbao.github.io/post/chang-jian-liu-lan-qi-nei-he/</id>
        <link href="https://dominicbao.github.io/post/chang-jian-liu-lan-qi-nei-he/">
        </link>
        <updated>2021-08-22T14:44:20.000Z</updated>
        <content type="html"><![CDATA[<h1 id="内核">内核</h1>
<p>Trident：IE 浏览器内核；<br>
Gecko：Firefox 浏览器内核；<br>
Presto：Opera 浏览器内核；<br>
Webkit：Safari 浏览器内核；<br>
Blink：谷歌浏览器内核，属于 Webkit 的一个分支，与 Opera 一起在研发；</p>
<h1 id="浏览器">浏览器</h1>
<p>IE：Trident，IE 内核；<br>
Chrome：以前是 Webkit，现在是 Blink 内核；<br>
Firefox：Gecko 内核；<br>
Safari：Webkit 内核；<br>
Opera：一起是 Presto，现在是 Blink 内核；<br>
360、猎豹浏览器内核：IE + Blink 双内核；<br>
搜狗、遨游、QQ 浏览器内核：Trident（兼容模式）+ Webkit（高速模式）；<br>
百度浏览器、世界之窗内核：IE 内核；<br>
2345 浏览器：以前是 IE 内核，现在是 IE + Blink 双内核；<br>
UC 浏览器内核：Webkit + Trident；</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[浅谈JavaScript执行机制]]></title>
        <id>https://dominicbao.github.io/post/20210505-01/</id>
        <link href="https://dominicbao.github.io/post/20210505-01/">
        </link>
        <updated>2021-05-05T14:46:32.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>2021-05-08 @阿方</p>
</blockquote>
<p>在说js的执行机制之前，清先记住一个亘古不变的原则，js是一门单线程的语言，你所谓的各种花里胡哨的‘多线程’，全部都是用单线程实现的</p>
<p>先看看看第一道题</p>
<pre><code class="language-js">setTimeout(function(){
    console.log('1')
})

new Promise(function(resolve){
    console.log('2');
    for(var i = 0; i &lt; 10000; i++){
        i == 99 &amp;&amp; resolve();
    }
}).then(function(){
    console.log('3')
})

console.log('4')
</code></pre>
<p>可能刚开始写前端不久的同学会给出1234这样的答案，而写过一段时间或者刷过几道题的前端则会给出2413这样的正解，那么你真的懂为什么了嘛，我们来稍微改一下题目</p>
<pre><code class="language-js">setTimeout(function(){
    console.log('1')
    new Promise(function(resolve) {
        console.log('2');
        resolve();
    }).then(function() {
        console.log('3')
    })
})

new Promise(function(resolve){
    console.log('4')
    resolve()
}).then(function(){
    new Promise(function(resolve) {
        console.log('5');
        resolve();
    }).then(function() {
        setTimeout(function(){
            console.log('6')
        })
        new Promise(function(resolve1) {
            console.log('7');
            resolve1();
        }).then(function() {
            console.log('8')
        })
        console.log('9')
    })
    console.log('10')
})

console.log('11')
</code></pre>
<p>正确的答案应该是4，11，5，10，7，9，8，1，2，3，6，如果你能快速的给出答案并且已经了解事件队列，宏任务，微任务这几个概念，那么本篇文章后续的部分就不必再看下去了，剩下的同学继续往后走呀</p>
<h3 id="settimeout">setTimeout</h3>
<p>写过前端的同学一定用过大名鼎鼎的setTimeout，其基本的用法我就不再展开，大概就是让里面的代码延迟执行</p>
<p>回到js是单线程的概念，当单线程遇到等会儿再执行的代码会怎么做呢，当然是整个打包扔到一边啦</p>
<h3 id="promise">Promise</h3>
<p>关于Promise的基本概念这里也不再展开了，我们只需要知道Promise内部的代码会立刻执行，then的代码会异步，那么对于异步的代码怎么办呢，当然也是选择整体打包丢在一边啦</p>
<h3 id="js的异步">js的异步</h3>
<p>再次回到js是单线程的概念，当它遇见等会儿再执行的东西都会选择丢在一旁再执行，那丢出去的东西去哪里了呢，当然就是进我们的任务队列啦，任务队列会收集这些任务，并让他们排好队，当主流程的东西执行完成后再执行这些队列中的东西<br>
<img src="https://dominicbao.github.io/post-images/1620406826700.png" alt="" loading="lazy"><br>
看到这里很多小伙伴就有疑惑了，对于第一题，答案应该是2413才对呀，3为什么能插队到1前面呢，那么我们就来讲讲为什么3能插队到1前面</p>
<h3 id="宏任务和微任务">宏任务和微任务</h3>
<p>我们先来讲讲定义吧<br>
宏任务：</p>
<ul>
<li>setTimeout</li>
<li>setInterval</li>
<li>setImmediate</li>
<li>requestAnimationFrame</li>
<li>I/O</li>
<li>UI渲染</li>
</ul>
<p>微任务</p>
<ul>
<li>Promise</li>
<li>MutationObserver</li>
<li>process.nextTick</li>
<li>queueMicrotask</li>
</ul>
<p>从上面的描述可以看出不管是题目1还是题目2都是一个大的宏任务，宏任务里面又包括这宏任务和微任务，面对不同的任务当然要区别对待，当遇见宏任务的时候会将其整个打包丢进任务队列，排在当前宏任务的后面，那如果又碰到宏任务了，就排在上面的宏任务的后面，那如果碰到微任务了，就将其放到微任务队列，每一个宏任务执行完成后，会先去执行完所有的微任务，再开始下一个宏任务<br>
<img src="https://dominicbao.github.io/post-images/1620407247087.png" alt="" loading="lazy"><br>
看到这里大概就明白为什么第一题是2431了，3被放到了第一个宏任务的微任务队列，成功插队1</p>
<p>那按照这个思路，第二题就变得很简单</p>
<ol>
<li>首先将整个第二题当作第一个宏任务丢进队列，碰到了1，2，3为代表的第一个宏任务，整个丢进任务队列排到当前任务后面，然后碰到了立刻执行的4和以5，6，7，8，9，10为代表的微任务，最后立刻执行11，至此4，11顺序已经出来了</li>
<li>执行5，6，7，8，9，10为代表的微任务，立刻执行5， 碰到了以6，7，8，9为代表的微任务，立刻执行10，至此4，11，5，10顺序出来了</li>
<li>执行6，7，8，9为代表的微任务，碰到了6为代表的宏任务，丢到1，2，3为代表的宏任务后面，立刻执行7，碰到了以8为代表的微任务，立刻执行9，至此4，11，5，10，7，9顺序出来了</li>
<li>执行以8为代表的微任务，第一个宏任务结束，至此4，11，5，10，7，9，8顺序出来了</li>
<li>执行1，2，3为代表的宏任务，立刻执行1，2将3放入微任务，至此4，11，5，10，7，9，8，1，2顺序出来了</li>
<li>执行以3为代表的微任务，第一个宏任务结束，至此4，11，5，10，7，9，8，1，2，3顺序出来了</li>
<li>执行以6为代表的宏任务，至此4，11，5，10，7，9，8，1，2，3，6的顺序全部完成</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Store.js的使用——本地存储localStorage的封装插件]]></title>
        <id>https://dominicbao.github.io/post/20191126-01/</id>
        <link href="https://dominicbao.github.io/post/20191126-01/">
        </link>
        <updated>2021-04-27T15:52:25.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>2019-11-26 @阿方<br>
在说Store.js之前，我们先来明确几个基本的概念，Cookie，localStorage，sessionStorage</p>
</blockquote>
<ul>
<li>Cookie<br>
Cookie 是小甜饼的意思。顾名思义，cookie 确实非常小，它的大小限制为4KB左右，是网景公司的前雇员 Lou Montulli 在1993年3月的发明。它的主要用途有保存登录信息，比如你登录某个网站市场可以看到“记住密码”，这通常就是通过在 Cookie 中存入一段辨别用户身份的数据来实现的</li>
<li>localStorage<br>
localStorage 是 HTML5 标准中新加入的技术，它并不是什么划时代的新东西。早在 IE 6 时代，就有一个叫 userData 的东西用于本地存储，而当时考虑到浏览器兼容性，更通用的方案是使用 Flash。而如今，localStorage 被大多数浏览器所支持，如果你的网站需要支持 IE6+，那以 userData 作为你的 polyfill 的方案是种不错的选择</li>
<li>sessionStorage<br>
sessionStorage 与 localStorage 的接口类似，但保存数据的生命周期与 localStorage 不同。做过后端开发的同学应该知道 Session 这个词的意思，直译过来是“会话”。而 sessionStorage 是一个前端的概念，它只是可以将一部分数据在当前会话中保存下来，刷新页面数据依旧存在。但当页面关闭后，sessionStorage 中的数据就会被清空<br>
<img src="https://dominicbao.github.io/post-images/1619538848881.png" alt="" loading="lazy"><br>
有了以上的的基础概念，我们就可以来理解store.js到底是个什么东西了，随着浏览器的快速发展，很多需要用到本地存储的应用场景诞生了，于是需求推动了技术，什么globalStorage啊都来了。store.js可以理解成一个大礼包，他封装了大多数人对localStorage的使用，他不涉及cookie，在ie6之下时会自动使用userData，我们不必再去管什么场景下用什么本地浏览器存储会不会影响到cookies，影响到浏览器的传输速率，这就是它最大的用处<br>
以下是它的基本语法<br>
<img src="https://dominicbao.github.io/post-images/1619538912743.png" alt="" loading="lazy"><br>
判断它在当前浏览器是否可用<br>
<img src="https://dominicbao.github.io/post-images/1619538929903.png" alt="" loading="lazy"><br>
好了简单的分享一下<br>
Github地址：<br>
https://github.com/marcuswestin/store.js/tree/master/dist<br>
简要的文档github地址：<br>
https://github.com/DominicBao/echarts-guanxi/branches</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[spark的学习笔记（1）]]></title>
        <id>https://dominicbao.github.io/post/20191111-01/</id>
        <link href="https://dominicbao.github.io/post/20191111-01/">
        </link>
        <updated>2021-04-26T14:19:49.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>2019-11-11 @阿方</p>
</blockquote>
<h3 id="什么是spark">什么是spark</h3>
<p>用于大规模数据处理的统一分析引擎，实现快速通用的集群计算平台，是通用内存并行计算框架，用来构建大型的，低延迟的数据分析应用程序。Spark的一个主要特点是能够在内存中进行计算，及时依赖磁盘进行复杂的运算</p>
<h3 id="spark的四大特性">Spark的四大特性</h3>
<ul>
<li>高效性<br>
用嘴先进的DAG调度程序，查询优化程序和物理执行引擎，实现批量和流式数据的高性能。</li>
<li>易用性<br>
支持java，python，Scala的API，支持超过80种高级算法。支持交互式的Python和Scala的shell，可以方便的在这些shell中使用Spark集群解决问题</li>
<li>通用性<br>
提供了统一的解决方案。Spark可以用于批处理、交互式查询（Spark SQL）、实时流处理（Spark Streaming）、机器学习（Spark MLlib）和图计算（GraphX）。这些不同类型的处理都可以在同一个应用中无缝使用<br>
<img src="https://dominicbao.github.io/post-images/1619447115609.png" alt="" loading="lazy"></li>
<li>兼容性<br>
字面意思，兼容性高</li>
</ul>
<h3 id="spark的组成">Spark的组成：</h3>
<p>他的主要组成有</p>
<ul>
<li>SparkCore：将分布式数据抽象为弹性分布式数据集（RDD），实现了应用任务调度、RPC、序列化和压缩，并为运行在其上的上层组件提供API</li>
<li>SparkSQL：Spark Sql 是Spark来操作结构化数据的程序包，可以让我使用SQL语句的方式来查询数据，Spark支持 多种数据源，包含Hive表，parquest以及JSON等内容</li>
<li>SparkStreaming： 是Spark提供的实时数据进行流式计算的组件</li>
<li>MLlib：提供常用机器学习算法的实现库</li>
<li>GraphX：提供一个分布式图计算框架，能高效进行图计算</li>
<li>BlinkDB：用于在海量数据上进行交互式SQL的近似查询引擎</li>
<li>Tachyon：以内存为中心高容错的的分布式文件系统</li>
</ul>
<h3 id="本地部署spark">本地部署spark</h3>
<p>在公司的dc平台上我们使用的是pyspark但由于spark是由scala编写的，所以使用scala会更有利于我们更好的理解spark引擎，所以这里我要部署在本地的是scala为api的spark</p>
<ol>
<li>
<p>下载编译工具，在这之前我一直使用的是eclipse，但由于网上众多网友都吹intelliJ IDEA有多好，所以这里我也使用idea来进行部署，首先在官方网站上下载，这里可以下载免费的社区版应该功能够了，我使用的是旗舰版因为学生任性</p>
</li>
<li>
<p>下载后进行安装，点点点后会到这个操作界面，我们点击右下角如红色圈圈锁住额地方，下载scala插件：<br>
<img src="https://dominicbao.github.io/post-images/1619447314137.png" alt="" loading="lazy"><br>
这里我已经下载好了，你们就搜scala然后下载就好<br>
<img src="https://dominicbao.github.io/post-images/1619447368873.png" alt="" loading="lazy"></p>
</li>
<li>
<p>然后我们重启idea后再点击如下图右下角红色圈圈的地方<br>
<img src="https://dominicbao.github.io/post-images/1619447408196.png" alt="" loading="lazy"><br>
在这里我们需要配置两个东西，一个是jdk一个是scala，这里要注意，由于这里spark版本我选择的是1.4.4（dc平台上是1.4），由于兼容性的问题，jdk需要8+，scala需要1.2.x，不能1.3不能1.1，详情可以看spark官方网站上的兼容性的文档<br>
https://spark.apache.org/docs/latest/index.html<br>
首先是jdk的包，一般来讲下载idea会自带的下两个jdk，如果没有的需要你自行去下载并且配置好全局变量：<br>
<img src="https://dominicbao.github.io/post-images/1619447488600.png" alt="" loading="lazy"><br>
然后下载scala，一般来讲是没有下载过的，但如果你自己下载了就直接导入就好，没有的话按如下图三个地方，记得版本要选1.2.x的不能太高也不能太低<br>
<img src="https://dominicbao.github.io/post-images/1619447520778.png" alt="" loading="lazy"><br>
记得先点apply再点ok</p>
</li>
<li>
<p>然后就可以创建一个新的项目了，这里为了使配置更加简单一点，我们采用maven项目，上面红圈内选择自己的jdk版本,应该会自动显示出来，如果没有的话自己选一下，然后点击next：<br>
<img src="https://dominicbao.github.io/post-images/1619448192256.png" alt="" loading="lazy"><br>
接下去就是maven的基本配置了，自己随便取个名字然后next，finally二连就可以了<br>
<img src="https://dominicbao.github.io/post-images/1619448219639.png" alt="" loading="lazy"><br>
<img src="https://dominicbao.github.io/post-images/1619448226912.png" alt="" loading="lazy"><br>
如果你是第一次创建maven项目的话第一次编译可能需要一点时间，等他编译好就好，一般来讲不会出现什么问题，如果有，算你脸黑自行百度哈</p>
</li>
<li>
<p>编译完成后的样子应该是这样的：<br>
<img src="https://dominicbao.github.io/post-images/1619448258764.png" alt="" loading="lazy"><br>
其中红框的地方你应该没有，那是build后产生的calss文件，然后我们首先配置scala环境，右击主标题，导入其他的包，如下图所示<br>
<img src="https://dominicbao.github.io/post-images/1619448282424.png" alt="" loading="lazy"><br>
导入scala的包，在这个界面找到scala前面打上勾ok就好，这里因为我已经导入了看不见了所以就不模拟了<br>
<img src="https://dominicbao.github.io/post-images/1619448306166.png" alt="" loading="lazy"><br>
在src-main，创建scala文件夹<br>
<img src="https://dominicbao.github.io/post-images/1619448332116.png" alt="" loading="lazy"><br>
右击它，将它设置为root文件夹，正常来讲你会发现它的颜色变成了和上面的java文件夹一样<br>
<img src="https://dominicbao.github.io/post-images/1619448355962.png" alt="" loading="lazy"><br>
这里由于我已经将其设为了root文件夹所以只有取消的按钮，不掩饰了哈，这时候你可以创建一个scala任务跑一下验证你的scala配置是否出错<br>
<img src="https://dominicbao.github.io/post-images/1619448384637.png" alt="" loading="lazy"><br>
在object中输出一下的代码，启动看看是否会输出hello word<br>
<img src="https://dominicbao.github.io/post-images/1619448418166.png" alt="" loading="lazy"></p>
</li>
<li>
<p>最后就是配置maven的pom.xml文件进行spark包的导入了，由于是maven嘛，你懂的，在pom.xml文件中加入如下的语句，我这里的版本如下spark（1.4.4），jdk（12），scala（1.2.8）</p>
</li>
</ol>
<pre><code class="language-xml">&lt;properties&gt;
        &lt;spark.version&gt;2.4.4&lt;/spark.version&gt;
        &lt;scala.version&gt;2.12&lt;/scala.version&gt;
    &lt;/properties&gt;


&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;
        &lt;artifactId&gt;spark-core_${scala.version}&lt;/artifactId&gt;
        &lt;version&gt;${spark.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;
        &lt;artifactId&gt;spark-streaming_${scala.version}&lt;/artifactId&gt;
        &lt;version&gt;${spark.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;
        &lt;artifactId&gt;spark-sql_${scala.version}&lt;/artifactId&gt;
        &lt;version&gt;${spark.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;
        &lt;artifactId&gt;spark-hive_${scala.version}&lt;/artifactId&gt;
        &lt;version&gt;${spark.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;
        &lt;artifactId&gt;spark-mllib_${scala.version}&lt;/artifactId&gt;
        &lt;version&gt;${spark.version}&lt;/version&gt;
    &lt;/dependency&gt;

&lt;/dependencies&gt;

&lt;build&gt;
    &lt;plugins&gt;

        &lt;plugin&gt;
            &lt;groupId&gt;org.scala-tools&lt;/groupId&gt;
            &lt;artifactId&gt;maven-scala-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.15.2&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;compile&lt;/goal&gt;
                        &lt;goal&gt;testCompile&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;

        &lt;plugin&gt;
            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
            &lt;version&gt;3.6.0&lt;/version&gt;
            &lt;configuration&gt;
                &lt;source&gt;1.8&lt;/source&gt;
                &lt;target&gt;1.8&lt;/target&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;

        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.19&lt;/version&gt;
            &lt;configuration&gt;
                &lt;skip&gt;true&lt;/skip&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;

    &lt;/plugins&gt;
&lt;/build&gt;
</code></pre>
<p>然后静静等他把该配的包配完就好了，完成后在刚刚创建的scala文件中输入以下的代码，运行完成就ok了，如果这里报错了，自行百度哈，你找我我也是百度谷歌给你看滴</p>
<pre><code class="language-java">import org.apache.spark.{SparkConf, SparkContext}

object myFiistScala {
  def main(args: Array[String]): Unit = {
    println(&quot;Hello world&quot;)
    val conf = new SparkConf().setAppName(&quot;mySpark&quot;)
    //setMaster(&quot;local&quot;) 本机的spark就用local，远端的就写ip
    //如果是打成jar包运行则需要去掉 setMaster(&quot;local&quot;)因为在参数中会指定。
    conf.setMaster(&quot;local&quot;)
    val sc =new SparkContext(conf)
    val rdd =sc.parallelize(List(1,2,3,4,5,6)).map(_*3)
    val mappedRDD=rdd.filter(_&gt;10).collect()
    //对集合求和
    println(rdd.reduce(_+_))
    //输出大于10的元素
    for(arg &lt;- mappedRDD)
      print(arg+&quot; &quot;)
    println()
    println(&quot;math is work&quot;)
  }
}
</code></pre>
<p>最后展示一下成功的样子趴，祝大家都可以跟我一样哈，last，如果以上有啥专业术语看不懂，强烈建议去补下课哈<br>
<img src="https://dominicbao.github.io/post-images/1619448802495.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python内存管理与垃圾回收]]></title>
        <id>https://dominicbao.github.io/post/20190826-01/</id>
        <link href="https://dominicbao.github.io/post/20190826-01/">
        </link>
        <updated>2021-04-24T16:18:55.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>2018-08-26 @阿方</p>
</blockquote>
<h2 id="内存管理">内存管理</h2>
<p>现在有一个int字段为1，我们定义如下两条字段：</p>
<p>a = 1<br>
b = 1</p>
<p>那么，a和b指向的将是同一个地址，也就是字段1所在的地址，这就是python最基本的引用场景，不管是对于字段还是对象都是如此。也就是我们所说的对象池，python将各种各样的对象（“a”，1，2，list1）放入对象池中，我们需要的时候就去里面取，这样就不用自己创造了，以此达到速度快的目的</p>
<p>为了便于理解引入如下图所示的代码</p>
<figure data-type="image" tabindex="1"><img src="https://dominicbao.github.io/post-images/1619281406625.png" alt="" loading="lazy"></figure>
<p>那么它的拓扑图结构为</p>
<figure data-type="image" tabindex="2"><img src="https://dominicbao.github.io/post-images/1619281463153.png" alt="" loading="lazy"></figure>
<p>我们已经了解了python的基本引用机制，那将话题再深入一点，python对于内存是如何管理的呢。Python将内存管理分成了4层，整体成金字塔形。最底层当然是c语言，也就是molloc和free函数，这两个函数是啥自行百度哈，就是动态分配内存函数和释放函数（此处建议学学看c语言基础和操作系统内存篇，没学过的补课哈 😃</p>
<p>然后第一层第二层是内存池，有python的接口函数PyMem_Malloc函数实现，当对象的内容小于256k时，他会直接进行内存的分配，而大于时，才会进行内存的动态分配，因为频繁的调用c的molloc函数会造成效率的下降。这里要注意的是，动态分配内存时，它每一块也是256k，而且经内存池调用过的内存块，会回收到内存池，而不会释放掉，以便于下次继续调用</p>
<p>最上面一层就是我们对python对象的操作</p>
<p>由于引用计数法和以上这种内存管理机制的存在， python中也是存在深拷贝和浅拷贝这种类似于js的特性存在的</p>
<p>数值，字符串，元组采用的是深拷贝，他们让A=B时，虽然还是指向同一个地址，但一旦A或者B改变了，他不会改变影响到另外一个，而是为其重新分配了内存，这在以下的代码中可以体现</p>
<figure data-type="image" tabindex="3"><img src="https://dominicbao.github.io/post-images/1619281532098.png" alt="" loading="lazy"></figure>
<p>但像字典，列表等数据结构，他们采用的就是浅拷贝，他们改变一个就会改变另一个</p>
<figure data-type="image" tabindex="4"><img src="https://dominicbao.github.io/post-images/1619281585220.png" alt="" loading="lazy"></figure>
<h2 id="垃圾回收">垃圾回收</h2>
<p>大概讲了下内存管理后我们来讲下python的垃圾回收机制，由于python时采取引用计数法的，那么垃圾回收的条件很容易的可以联想到，当计数为0时，将其回收。Python将垃圾回收分成了3代，我们将它记为0，1，2三代，某一代经历垃圾回收后依旧活着，那么就将它归入下一代中。所以，垃圾回收扫描0，1，2代的频率是不相同的，默认是扫描10次0代扫描1次1代，扫描10次1代扫描1次2代，这个频率可以通过python自带函数set.threshohold(700,10,10) 来进行调整</p>
<p>采用这样的垃圾处理方式可以处理大多数的情况，只是有那么有一种情况，对象自成环时，计数永远不可能为0，自然不可能被回收，那么这种情况时，python是怎么做处理的呢</p>
<figure data-type="image" tabindex="5"><img src="https://dominicbao.github.io/post-images/1619281759425.png" alt="" loading="lazy"></figure>
<p>在python中，它将每个对象A都计数为gc_ref_i，如果该对象有引用，那么就将这个计数减去1，那如果不为环，那么一个链路到最后，必有一个节点不为0，那么对于不为0的对象和这些对象引用的对象，以及更下游的，均保留。而如果为环，那么就都是0，这样的自然就可以被回收了因为自成环的引用没有什么意义</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[开始写博客啦]]></title>
        <id>https://dominicbao.github.io/post/20210425-01/</id>
        <link href="https://dominicbao.github.io/post/20210425-01/">
        </link>
        <updated>2021-04-24T16:08:58.000Z</updated>
        <content type="html"><![CDATA[<p>一直都有记录点东西的习惯</p>
<p>会简单的记录一些学习笔记&amp;生活琐事&amp;杂文趣事</p>
<p>现在分享出来希望和大家一起进步</p>
]]></content>
    </entry>
</feed>